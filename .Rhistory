x0 <- rep("Venta de Miel", dim(ueMiel@data)[1])
ueMiel@data$x0 <- cbind(ueMiel@data, x0)
ueMielApic <- raster::bind(ueMiel, proApicola)
library(sp)
library(rgdal)
library(leaflet)
library(htmltools)
library(htmlwidgets)
library(leaflet.extras)
library(mapview)
library(raster)
library(bitops)
library(rjson)
library(xts)
proApic <- readOGR("geodata/INEGI_DENUE_21012019_APICOLA/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
salen1 <- c(3913258,2218442,3096733,3640449,4083614,4184935,4449017,4486570)
proApicola <- subset(proApic, !(is.element(proApic@data$id, salen1)))
x0 <- rep("Actividades apícolas", dim(proApicola@data)[1])
proApicola@data <- cbind(proApicola@data, x0)
proMiel <- readOGR("geodata/INEGI_DENUE_21012019_MIEL/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
entran <- c(1662213,2565829,1426730,1751907,4282468,3518984)
salen2 <- c(1812561,3163906,3164094,2603960,1764794,555821,2477068,2465731,452114,4552918,1573930,3946536,
3426513,450223,485578,1436249,6743142,4108619)
cod_scian <- c(311221,311999,321920,325412,325610,431194,431199,461190,461130,461140,461150,464113,493130)
ueMiel <- subset(proMiel, ((is.element(proMiel@data$codigo_act, cod_scian)
| is.element(proMiel@data$id, entran)) & !(is.element(proMiel@data$id, salen2))))
x0 <- rep("Venta de Miel", dim(ueMiel@data)[1])
ueMiel@data$x0 <- cbind(ueMiel@data, x0)
otrApic <- readOGR("geodata/INEGI_DENUE_01082019_OTRAPIC/INEGI_DENUE_01082019.shp",
"INEGI_DENUE_01082019", verbose=FALSE)
x0 <- rep("Actividades apícolas", dim(otrApic@data)[1])
otrApic@data$x0 <- cbind(otrApic@data, x0)
ueMielApic <- raster::bind(ueMiel, proApicola)
dim(otrApic@data)[1]
proApic <- readOGR("geodata/INEGI_DENUE_21012019_APICOLA/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
salen1 <- c(3913258,2218442,3096733,3640449,4083614,4184935,4449017,4486570)
proApicola <- subset(proApic, !(is.element(proApic@data$id, salen1)))
x0 <- rep("Actividades apícolas", dim(proApicola@data)[1])
proApicola@data <- cbind(proApicola@data, x0)
proMiel <- readOGR("geodata/INEGI_DENUE_21012019_MIEL/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
entran <- c(1662213,2565829,1426730,1751907,4282468,3518984)
salen2 <- c(1812561,3163906,3164094,2603960,1764794,555821,2477068,2465731,452114,4552918,1573930,3946536,
3426513,450223,485578,1436249,6743142,4108619)
cod_scian <- c(311221,311999,321920,325412,325610,431194,431199,461190,461130,461140,461150,464113,493130)
ueMiel <- subset(proMiel, ((is.element(proMiel@data$codigo_act, cod_scian)
| is.element(proMiel@data$id, entran)) & !(is.element(proMiel@data$id, salen2))))
ueMiel@data$x0 <- rep("Venta de Miel", dim(ueMiel@data)[1])
ueMielApic <- raster::bind(ueMiel, proApicola)
proApic <- readOGR("geodata/INEGI_DENUE_21012019_APICOLA/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
salen1 <- c(3913258,2218442,3096733,3640449,4083614,4184935,4449017,4486570)
proApicola <- subset(proApic, !(is.element(proApic@data$id, salen1)))
x0 <- rep("Actividades apícolas", dim(proApicola@data)[1])
proApicola@data <- cbind(proApicola@data, x0)
proMiel <- readOGR("geodata/INEGI_DENUE_21012019_MIEL/INEGI_DENUE_21012019.shp",
"INEGI_DENUE_21012019", verbose=FALSE)
entran <- c(1662213,2565829,1426730,1751907,4282468,3518984)
salen2 <- c(1812561,3163906,3164094,2603960,1764794,555821,2477068,2465731,452114,4552918,1573930,3946536,
3426513,450223,485578,1436249,6743142,4108619)
cod_scian <- c(311221,311999,321920,325412,325610,431194,431199,461190,461130,461140,461150,464113,493130)
ueMiel <- subset(proMiel, ((is.element(proMiel@data$codigo_act, cod_scian)
| is.element(proMiel@data$id, entran)) & !(is.element(proMiel@data$id, salen2))))
ueMiel@data$x0 <- rep("Venta de Miel", dim(ueMiel@data)[1])
otrApic <- readOGR("geodata/INEGI_DENUE_01082019_OTRAPIC/INEGI_DENUE_01082019.shp",
"INEGI_DENUE_01082019", verbose=FALSE)
otrApic@data$x0 <- rep("Actividades apícolas", dim(otrApic@data)[1])
ueMielApic <- raster::bind(ueMiel, proApicola)
ueMielApic <- raster::bind(ueMielApic, otrApic)
dim(ueMielApic)
dim(ueMiel)
dim(proApicola)
dim(otrApic)
855+76+23
ueMielApic$x0
quakes.df <- split(ueMielApic, ueMielApic$x0)
l <- leaflet() %>% addTiles() %>%
addFullscreenControl()
names(quakes.df) %>%
purrr::walk( function(df) {
l <<- l %>%
addMarkers(data=quakes.df[[df]],
group = df,
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F),
popup = paste0( "<strong>id: </strong>", quakes.df[[df]]$id, "</br>",
"<strong>NOMBRE_ESTABLECIMIENTO: </strong>", quakes.df[[df]]$nom_estab, "</br>",
"<strong>TIPO: </strong>", quakes.df[[df]]$nombre_act, "</br>",
"<strong>MUNICIPIO: </strong>", quakes.df[[df]]$municipio, "</br>",
"<strong>ENTIDAD: </strong>", quakes.df[[df]]$entidad
)
)
})
l %>%
addMiniMap(toggleDisplay = TRUE, position = "bottomleft") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479")%>%
addEasyButton(easyButton(
icon="fa-crosshairs",
title="Locate Me",
onClick=JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
addLayersControl(
overlayGroups = names(quakes.df),
options = layersControlOptions(collapsed = FALSE)
) %>% addMouseCoordinates()  %>%
addHomeButton(extent(proMiel), layer.name = "i",  position = "topleft")
writeOGR(ueMielApic, "geodata/puntos_miel.shp", "puntos_miel", "ESRI Shapefile", encoding = "UTF-8")
write.csv(ueMielApic@data,"geodata/puntos_miel.csv")
rmarkdown::render_site(encoding="UTF-8")
rmarkdown::render_site(encoding="UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
library(sp)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(mapview)
prod_miel <- readOGR("geodata", "ent_a", verbose=FALSE, encoding = "UTF")
prodmiel2018 <- read.csv("tabs/prodmiel2018.csv", head= T)
prod_miel$total2018 <- prodmiel2018[,3]
map_prod_miel <- leaflet(data=prod_miel)
clust <- kmeans(prod_miel$total2018,5)
breaks <- sort(c(0, max((prod_miel$total2018)[clust$cluster == 1]),
max((prod_miel$total2018)[clust$cluster == 2]),
max((prod_miel$total2018)[clust$cluster == 3]),
max((prod_miel$total2018)[clust$cluster == 4]),
max((prod_miel$total2018)[clust$cluster == 5])))
breaks2 <- c((round(breaks[-6],1)),(ceiling(breaks[6])))
binpal <- colorBin("Oranges", prod_miel$total2018, breaks2)
map_prod_miel %>%
setView(lng = -102.43, lat = 22.37, zoom = 5.4) %>%
addTiles() %>% addFullscreenControl() %>%
addPolygons(
stroke = FALSE,
fillOpacity = 1.0,
smoothFactor = 0.1,
color = ~binpal(total2018),
popup = paste0("<strong>CVE_ENT: </strong>", prod_miel$CVE_ENT, "</br>",
"<strong>ENTIDAD: </strong>", prod_miel$NOMGEO, "</br>",
"<strong>PRODUCCIÓN: </strong>", prod_miel$total2018)
) #%>%
#  addLegend(
#   "bottomleft", pal = binpal, values = ~total2018,
#    title = "Producción de Miel <br/> (Toneladas)",
#    opacity = 0.7
#  )
library(DiagrammeR)
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{  Colonia Nueva con 5 cuadros S/REINA <br/> al sitio de la madre   }
C-->A
style A fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{  Colonia Nueva con 5 cuadros <br> S/REINA <br/> al sitio de la madre   }
C-->A
style A fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{  Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre   }
C-->A
style A fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{ <div class=text-justify> Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre  </div> }
C-->A
style A fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{ <p class=text-justify> Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre  </p> }
C-->A
style A fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{ <p align=center> Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre  </p> }
C-->A
style A fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
style A fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
B-->A
B<-->C
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
B-->A
B<--C
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A-->C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
B-->A
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(  Cepa madre con <br/> 10 cuadros +  REINA  ) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A==>C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
B-->A
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A((  Cepa madre con <br/> 10 cuadros +  REINA  )) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A==>C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
B-->A
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph LR
A(  Colmena madre  ) --> B( Colmena con 8 cuadros </br> S/R al sitio de la madre. </br> Después de 8 días, éstas se dividen )
A --> C(  Colmena con 2 cuadros + </br> R a 10 metros del sitio original )
B --> D(  4 Colmenas con 2 cuadros </br> + Realeras )
style A fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
style D fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A([  Cepa madre con <br/> 10 cuadros +  REINA  ]) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A==>C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
B-->A
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A[(  Cepa madre con <br/> 10 cuadros +  REINA  )] --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A==>C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
B-->A
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A(((  Cepa madre con <br/> 10 cuadros +  REINA  ))) --> B[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]
A==>C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
B-->A
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
DiagrammeR::mermaid("
graph TB
A((  Cepa madre con <br/> 10 cuadros +  REINA  )) --> B[[ Cepa madre con 5 cuadros + REINA <br/> a 20 metros de sitio original  ]]
A==>C{ Colonia Nueva con <br> 5 cuadros <br> S/REINA <br/> al sitio de la madre }
C-->A
B-->A
style A fill:cyan,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style B fill:orange,color:#ebd4cb,stroke:#ebd4cb,stroke-width:2px;
style C fill:gold,color:#ebd4cb,stroke:#ebd4cb,stroke-width:1px;
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
Obj1 <- paste(C("esto", "es", "un", "ejemplo"), sep= " ")
C("esto", "es", "un", "ejemplo")
Obj1 <- paste(c("esto", "es", "un", "ejemplo"), sep= " ")
Obj1
obj1 <- paste(c("esto", "es", "un", "ejemplo"), sep= " ")
obj1
obj1 <- paste(c(esto, es, un, ejemplo), sep= " ")
obj1 <- paste(c("esto es un ejemplo"), sep= " ")
obj1
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
obj1; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
obj1->1 B->2 B->3 B->4 C->obj1
1->D E->obj1 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
obj1
str(obj1)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
str(obj1); B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
str(obj1)->1 B->2 B->3 B->4 C->str(obj1)
1->D E->str(obj1) 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
obj1
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
'esto es'; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
'esto es'->1 B->2 B->3 B->4 C->'esto es'
1->D E->'esto es' 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
'Esto es'; 'una'; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
'Esto es'->1 'una'->2 'una'->3 'una'->4 C->'esto es'
1->D E->'esto es' 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
rmarkdown::render_site(encoding = "UTF-8")
install.packages("DiagrammeR")
install.packages("DiagrammeR")
rmarkdown::render_site(encoding = "UTF-8")
devtools::install_github("rstudio/fontawesome")
install.packages("devtools")
devtools::install_github("rstudio/fontawesome")
install.packages("devtools")
devtools::install_github("rstudio/fontawesome")
install.packages("rlang")
devtools::install_github("rstudio/fontawesome")
rmarkdown::render_site(encoding = "UTF-8")
library(ggplot2)
library(DT)
library(fontawesome)
rmarkdown::render_site(encoding = "UTF-8")
install.packages("devtools")
install.packages("devtools")
rmarkdown::render_site(encoding = "UTF-8")
devtools::install_github("ropenscilabs/icon")
rmarkdown::render_site(encoding = "UTF-8")
install.packages("kableExtra")
rmarkdown::render_site(encoding = "UTF-8")
install.packages("sp")
rmarkdown::render_site(encoding = "UTF-8")
install.packages("rgdal")
install.packages("dygraphs")
install.packages("plotly")
install.packages("leaflet")
install.packages("leaflet.extras")
install.packages("mapview")
install.packages("htmltools")
install.packages("htmlwidgets")
install.packages("raster")
install.packages("bitops")
install.packages("rjson")
install.packages("xts")
rmarkdown::render_site(encoding = "UTF-8")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("imag/Portada5.gif")
knitr::include_graphics("imag/1_Just.gif")
knitr::include_graphics("imag/1_Just.gif")
install.packages("vembedr")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
rmarkdown::render_site(encoding = "UTF-8")
